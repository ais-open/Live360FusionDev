{
	"Local Dev Storage Connection String": {
		"scope": "json",
		"prefix": "stor",
		"body": "UseDevelopmentStorage=true"
	},
	"Add Employee Http": {
		"scope": "http",
		"prefix": "testadd",
		"body": [
			"@url = ${1:https://tommck-live360.azurewebsites.net/api/addemployee?code=XXXX}",
			"",
			"POST {{url}}&first=\"${2:First Name}\"&last=\"${3:Last Name}\"",
			"$0"
		]
	},
	"Add Employee Class": {
		"prefix": "empadd",
		"body": [
		  "using System;",
		  "using System.Net;",
		  "using Azure;",
		  "using Microsoft.AspNetCore.Http;",
		  "using Microsoft.AspNetCore.Mvc;",
		  "using Microsoft.Azure.WebJobs;",
		  "using Microsoft.Azure.WebJobs.Extensions.Http;",
		  "using Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;",
		  "using Microsoft.Extensions.Logging;",
		  "using Microsoft.OpenApi.Models;",
		  "",
		  "namespace Live360.Accounting",
		  "{",
		  "    public class AddEmployee",
		  "    {",
		  "        private readonly ILogger<AddEmployee> _logger;",
		  "",
		  "        public AddEmployee(ILogger<AddEmployee> log)",
		  "        {",
		  "            _logger = log;",
		  "        }",
		  "",
		  "        [FunctionName(nameof(AddEmployee))]",
		  "        [OpenApiOperation(operationId: nameof(AddEmployee))]",
		  "        [OpenApiParameter(name: \"first\", In = ParameterLocation.Query, Required = true, Type = typeof(string), Description = \"The **First** parameter\")]",
		  "        [OpenApiParameter(name: \"last\", In = ParameterLocation.Query, Required = true, Type = typeof(string), Description = \"The **Last** parameter\")]",
		  "        [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: \"text/plain\", bodyType: typeof(string), Description = \"The OK response\")]",
		  "        public IActionResult Run(",
		  "            [HttpTrigger(AuthorizationLevel.Anonymous, \"post\", Route = null)]",
		  "            HttpRequest req)",
		  "        {",
		  "            string first = req.Query[\"first\"];",
		  "            string last = req.Query[\"last\"];",
		  "            ",
		  "            if (string.IsNullOrEmpty(first) || string.IsNullOrEmpty(last)) ",
		  "            {",
		  "                throw new ArgumentException(\"'first' and 'last' are required\");",
		  "            }",
		  "",
		  "            var connStr = Environment.GetEnvironmentVariable(\"AzureWebJobsStorage\");",
		  "",
		  "            var service = new EmployeeStorageService(connStr);",
		  "            var employee = service.AddEmployee(first, last);",
		  "",
		  "            return new OkObjectResult(employee.RowKey);",
		  "        }",
		  "    }",
		  "}",
		  "",
		  ""
		],
		"description": "Add Employee Class"
	},
	"Employee Storage ": {
		"prefix": "empstorage",
		"body": [
		  "using Azure.Data.Tables;",
		  "",
		  "namespace Live360.Accounting;",
		  "",
		  "public class EmployeeStorageService",
		  "{",
		  "    private TableServiceClient _serviceClient;",
		  "",
		  "    public EmployeeStorageService(string storageConnectionString)",
		  "    {",
		  "        _serviceClient = new TableServiceClient(storageConnectionString);",
		  "",
		  "        // Create a new table. The TableItem class stores properties of the created table.",
		  "        _serviceClient.CreateTableIfNotExists(\"employees\");",
		  "    }",
		  "",
		  "    public Employee AddEmployee(string firstName, string lastName)",
		  "    {",
		  "        var tableClient = _serviceClient.GetTableClient(\"employees\");",
		  "",
		  "        var entity = new Employee {",
		  "            PartitionKey =\"all_employees\", ",
		  "            RowKey = $\"{lastName}, {firstName}\",",
		  "            FirstName = firstName,",
		  "            LastName = lastName",
		  "        };",
		  "",
		  "        tableClient.UpsertEntity(entity);",
		  "",
		  "        return entity;",
		  "    }",
		  "}"
		],
		"description": "Employee Storage "
	},
	"Employee Entity": {
		"prefix": "empentity",
		"body": [
		  "using System;",
		  "using Azure;",
		  "using Azure.Data.Tables;",
		  "",
		  "namespace Live360.Accounting;",
		  "",
		  "public class Employee : ITableEntity",
		  "{",
		  "    public string FirstName { get; set; }",
		  "    public string LastName { get; set; }",
		  "",
		  "    // entity properties",
		  "    public string PartitionKey { get; set; }",
		  "    public string RowKey { get; set; }",
		  "    public DateTimeOffset? Timestamp { get; set; }",
		  "    public ETag ETag { get; set; }",
		  "}",
		  ""
		],
		"description": "Employee Entity"
	}
}